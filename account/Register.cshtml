@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Register";

    var error = "";
    var password = "";
    var confirmPassword = "";
    
    Customer newCustomer = new Customer();

    // Setup validation
    Validation.RequireField("fName", "Please enter a first name.");
    Validation.RequireField("lName", "Please enter a last name.");
    Validation.Add("uName",
        Validator.Required("Please enter a username."),
        Validator.StringLength(
            maxLength: 30,
            minLength: 5,
            errorMessage: "Username must be between 5 and 30 characters long.")
    );
    Validation.Add("email",
        Validator.Required("Please enter an e-mail address."),
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$",
        "Invalid format for e-mail address.")
    );
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    
    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();

        newCustomer.FName = Request.Form["fName"];
        newCustomer.LName = Request.Form["lName"];
        newCustomer.Username = Request.Form["uName"];
        newCustomer.Email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        newCustomer.PhoneMain = Request.Form["phoneMain"];
        newCustomer.PhoneMainExt = Request.Form["phoneMainExt"];
        newCustomer.PhoneMainType = new PhoneType(Request.Form["phoneMainType"].AsInt());
        newCustomer.PhoneSecondary = Request.Form["phoneSecondary"];
        newCustomer.PhoneSecondaryExt = Request.Form["phoneSecondaryExt"];
        newCustomer.PhoneSecondaryType = new PhoneType(Request.Form["phoneSecondaryType"].AsInt());

        // Validate the user's captcha answer
        if (!ReCaptcha.Validate("6LfsnfoSAAAAACR_Gt5JFjVSYjTG2QfJpuULOfIu")) {
            ModelState.AddError("recaptcha", "Captcha response was not correct");
        }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("buSushi");
            int defaultStatus = 1;

            // Check if user already exists
            var user = db.QuerySingle("SELECT Username FROM UserProfile WHERE LOWER(Username) = LOWER(@0)", newCustomer.Username);
            if (user == null) {
                var commandText = string.Empty;

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    // Insert email into the profile table
                    commandText = "INSERT INTO UserProfile (Email, Username) VALUES (@0, @1)";
                    db.Execute(commandText, newCustomer.Email, newCustomer.Username);
                    var UserId = (int)db.GetLastInsertId();

                    /* Set new customer user id to newly created user id */
                    newCustomer.UserId = UserId;

                    /* Add customer information to the database */
                    newCustomer.addCustomer();

                    if(!string.IsNullOrEmpty(Request["address1"])){
                        CustomerAddress custAddr = new CustomerAddress();
                        
                        custAddr.fkCustomerId = newCustomer.pkCustomerId;
                        custAddr.Address1 = Request.Form["address1"];
                        custAddr.Address2 = Request.Form["address2"];

                        if(!string.IsNullOrEmpty(Request["cityId"])){custAddr.AddrCity = new City(Request["cityId"].AsInt());}
                        else{
                            City city = new City();
                            city.CityName = Request["city"];
                            city.ZipCode = Request["zip"];
                            city.CState = new State(Request["state"].AsInt());
                            /* Set address's city to new city */
                            custAddr.AddrCity = city;
                            /* Add new city to the database */
                            city.addCity();
                        }

                        custAddr.Nickname = Request.Form["addrNickname"];
                        custAddr.SpInstructions = Request.Form["addrInstructions"];
                        custAddr.isPrimary = Request["isPrimary"] == "on" ? true : false;
                        custAddr.isBilling = Request["isBilling"] == "on" ? true : false;

                        custAddr.addCustomerAddress();
                    }

                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(newCustomer.Username, password, requireEmailConfirmation);
                    db.Execute("UPDATE webpages_Membership SET fkUserStatusId = @0 WHERE UserId = @1", 1, UserId);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));
                        
                        WebMail.Send(
                            to: newCustomer.Email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }


                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(newCustomer.Email, password);

                        Response.Redirect("~/");
                    }

                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Username is already in use.");
            }
        }
    }
}

<script type="text/javascript">
    $(function () {
        var cities = [];
        /* Get full list of cities/zip/state */
        @foreach(City c in _common.getCities()){
            <text>cities.push({ Id: '@c.pkCityId', Name: '@c.CityName', Zip: '@c.ZipCode', StateId: '@c.CState.pkStateId' }); </text>
        }

        $("#zip").keyup(function () {getCityInfo();});
        $("#zip").click(function(){getCityInfo();});
        $("#zip").select(function(){getCityInfo();});
        $("#zip").change(function(){getCityInfo();});

        function getCityInfo(){
            if ($("#zip").val().replace(/ /g, '').length == 5) {
                var city = lookup(cities, "Zip", $("#zip").val().substring(0,5));

                if (city.length != 0) {
                    $("#cityId").val(city.Id);
                    $("#city").val(city.Name);
                    $("#state").val(city.StateId);
                }
            } else if ($("#zip").val().replace(/ /g, '').length < 5) {
                $("#cityId").val("");
                $("#city").val("");
                $("#state").val(0);
            }
        }
    });
</script>


<section id="registration">
    <header>
        <h3>Create a new account.</h3>
    </header>

    @error

    <form method="post">
        @AntiForgery.GetHtml()
        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

        <fieldset>
            <legend>User Info (required)</legend>
            <ul>
                <li class="fname">
                    <label for="fName"><span class="required">* First Name:</span> </label>
                    <input type="text" id="fName" name="fName" value="@newCustomer.FName" @Validation.For("fName") />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("fName", new {@class="error"})
                    <br />
                    <label for="lName"><span class="required">* Last Name:</span> </label>
                    <input type="text" id="lName" name="lName" value="@newCustomer.LName" @Validation.For("lName") />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("lName", new {@class="error"})
                </li>

                <li class="user-data">
                    <label for="uName"><span class="required">* Username:</span> </label>
                    <input type="text" id="uName" name="uName" value="@newCustomer.Username" @Validation.For("uName") />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("uName", new {@class="error"})
                    <br />
                    <label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}><span class="required">* Email address:</span> </label>
                    <input type="text" id="email" name="email" value="@newCustomer.Email" @Validation.For("email") />
                        
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("email", new {@class="error"})
                </li>
                
                <li class="password">
                    <label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}><span class="required">* Password:</span> </label>
                    <input type="password" id="password" name="password" @Validation.For("password") />
                    @* Write any password validation errors to the page *@
                    <p>@Html.ValidationMessage("password", new {@class="error"})</p>
                    <br />
                    <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}><span class="required">* Confirm password:</span> </label>
                    <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                    <p>
                    @* Write any password validation errors to the page *@
                    @Html.ValidationMessage("confirmPassword", new {@class="error"})
                    </p>
                </li>
            </ul>
        </fieldset>

        <fieldset>
            <legend>Address (optional)</legend>
            <header>
                Please enter the business address where we will be delivering your food:
                <br />
                <small>(Sorry, at the present, we do not deliver to non-business addresses)</small>
            </header>
            <ul>
                <li class="address-nickname">
                    <header>
                        Give this address a meaningful nickname (e.g. Office, Billing, etc.).
                    </header>
                    <label for="nickname">Nickname: </label>
                    <input type="text" id="addrNickname" name="addrNickname" value="" />
                </li>

                <li class="address-address1">
                    <label for="address1">Address: </label>
                    <input type="text" id="address1" name="address1" value="" @Validation.For("address1") />
                </li>

                <li class="address-address2">
                    <label for="address2">Address 2: </label>
                    <input type="text" id="address2" name="address2" value="" />
                </li>
                
                <li class="address-zip">
                    <label for="zip">Zip Code: </label>
                    <input type="text" id="zip" name="zip" value="" />
                </li>

                <li class="address-city">
                    <label for="city">City: </label>
                    <input type="text" id="city" name="city" value="" />
                    <input type="hidden" id="cityId" name="cityId" value="" />
                </li>

                <li class="address-state">
                    @Helpers.states(0)
                </li>

                <li class="address-instructions">
                    <label for="addrInstructions">Instructions: </label>
                    <input type="text" id="addrInstructions" name="addrInstructions" value="" />
                </li>

                <li class="isPrimary">
                    <label for="isPrimary">Primary? </label>
                    <input type="checkbox" id="isPrimary" name="isPrimary" checked />
                </li>

                <li class="isBilling">
                    <label for="isBilling">Billing? </label>
                    <input type="checkbox" id="isBilling" name="isBilling" />
                </li>
            </ul>
        </fieldset>

        <fieldset>
            <legend>Phone (optional)</legend>
            <ul>
                <li class="phoneMain">
                    <label for="phoneMain">Phone: </label>
                    <input type="text" id="phoneMain" name="phoneMain" class="phone" value="@newCustomer.PhoneMain" />

                    <label for="phoneMainExt">Ext: </label>
                    <input type="text" id="phoneMainExt" name="phoneMainExt" class="phoneExt" value="@newCustomer.PhoneMainExt" />

                    @Helpers.phoneTypes("phoneMainType", newCustomer.PhoneMainType.pkPhoneTypeId)
                </li>

                <li class="phoneSecondary">
                    <label for="phoneSecondary">Phone (Secondary): </label>
                    <input type="text" id="phoneSecondary" name="phoneSecondary" class="phone" value="@newCustomer.PhoneSecondary" />

                    <label for="phoneSecondaryExt">Ext: </label>
                    <input type="text" id="phoneSecondaryExt" name="phoneSecondaryExt" class="phoneExt" value="@newCustomer.PhoneSecondaryExt" />

                    @Helpers.phoneTypes("phoneSecondaryType", newCustomer.PhoneSecondaryType.pkPhoneTypeId)
                </li>
            </ul>
        </fieldset>

        <ul>
            <li class="recaptcha">
                <!-- div class="message-info">
                    <p>
                        To enable CAPTCHA verification, <a href="http://go.microsoft.com/fwlink/?LinkId=204140">install the 
                        ASP.NET Web Helpers Library</a> and uncomment ReCaptcha.GetHtml and replace 'PUBLIC_KEY'
                        with your public key. At the top of this page, uncomment ReCaptcha. Validate and
                        replace 'PRIVATE_KEY' with your private key.
                        Register for reCAPTCHA keys at <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div -->
                
                @ReCaptcha.GetHtml("6LfsnfoSAAAAACZSotW5I-NxQtVDvffcrPiYBIjA", theme: "white")
                @Html.ValidationMessage("recaptcha")
                
            </li>

            <li class="submit">
                <input type="submit" value="Register" />
            </li>
        </ul>
    </form>

</section>